using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.UI;

public class LevelGeneratorManager : MonoBehaviour
{
    public List<GameObject> PlacedTiles = new List<GameObject>();
    public List<GameObject> PlacedEndTiles = new List<GameObject>();
    public GameObject[] StartTiles;
    public GameObject[] BaseTiles;
    public GameObject[] EndTiles;
    public GameObject[] CapTiles;
    [SerializeField]
    private int minTiles;
    [SerializeField]
    private int maxTiles;
    [SerializeField]
    private int totalTiles;
    public bool GenerateBaseTiles;
    public bool GenerateEndTile;
    [SerializeField]
    private float FramesPassed = 4f;
    private GameObject SelectedTile;
    private GameObject GeneratedTile;
    private GameObject CreatedTile;
    [SerializeField]
    private Image BlackScreen;
    [SerializeField]
    private GameObject Player;
    [SerializeField]
    private CameraPlayMusic CameraMusic;

    // Start is called before the first frame update
    void Start()
    {
        //allows base tiles to be generated from the start, builds the spawn point tile and selects a random range of tiles to be generated between a desired minimum and maximum
        GenerateBaseTiles = true;
        BuildSpawnTile();
        totalTiles = Random.Range(minTiles, maxTiles);
        Player.SetActive(false);
    }

    // Update is called once per frame
    void Update()
    {
        //removes any empty entries from the list of placed tiles
        PlacedTiles.RemoveAll(GameObject => GameObject == null);
        PlacedEndTiles.RemoveAll(GameObject => GameObject == null);
        //checks if the amount of placed tiles exceeds the total amount allowed
        if (PlacedTiles.Count >= totalTiles)
        {
            GenerateBaseTiles = false;
            GenerateEndTile = true;
        }
        //if a end tile is placed, stops generating end tiles
        if (PlacedEndTiles.Count >= 1)
        {
            GenerateEndTile = false;
        }
        // if more than one end tile has been placed, this activates
        if (PlacedEndTiles.Count >= 2)
        {
            //selects the first end tile in the list, generates a cap tile over it and removes the end tile.
            SelectedTile = PlacedEndTiles[1];
            GeneratedTile = CapTiles[Random.Range(0, CapTiles.Length)];
            CreatedTile = Instantiate(GeneratedTile, SelectedTile.transform.position, SelectedTile.transform.rotation);
            PlacedTiles.Add(CreatedTile);
            PlacedEndTiles.Remove(SelectedTile);
            Destroy(SelectedTile.gameObject);

        }
        //counts down from the selected amount of seconds while the level is attempting to generate
        FramesPassed -= Time.deltaTime;
        if (FramesPassed <= 0)
        {
            //if the end tile hasnt been generated by the end of this timer, deletes all tiles and starts over.
            if (PlacedEndTiles.Count == 0)
            {
                Destroy(PlacedTiles.Last());
                PlacedTiles.Remove(PlacedTiles.Last());
            }
            if (PlacedTiles.Count == 0)
            {
                GenerateBaseTiles = true;
                BuildSpawnTile();
                FramesPassed = 4f;
            }
            if (PlacedEndTiles.Count == 1)
            {
                Player.SetActive(true);
                BlackScreen.CrossFadeAlpha(0.1f, 2.0f, false);
                CameraMusic.StartMusic();
            }

        }
    }
    //return methods for sending information to other scripts
    public bool CheckTileGenState()
    {
        return GenerateBaseTiles;
    }
    public bool CheckEndGenState ()
    {
        return GenerateEndTile;
    }

    public GameObject[] ReturnBaseTileList()
    {
        
        return BaseTiles;
    }
    public GameObject[] ReturnEndTileList()
    {
        
        return EndTiles;
    }
    public GameObject[] ReturnCapTileList()
    {
        
        return CapTiles;
    }

    public void BuildSpawnTile()
    {
        //selects a random starting tile and places it into the level, then adds it to the list of placed tiles
        GeneratedTile = StartTiles[Random.Range(0, StartTiles.Length)];
        CreatedTile = Instantiate(GeneratedTile, this.gameObject.transform.position, this.gameObject.transform.rotation);
        PlacedTiles.Add(CreatedTile);
    }
}
